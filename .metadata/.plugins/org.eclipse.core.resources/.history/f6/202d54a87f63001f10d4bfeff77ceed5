package com.kosta.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.ProviderManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@EnableWebSecurity
@Configuration
public class SecurityConfig {
	//암호화 빈
	@Bean
	BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	@Bean
	SecurityFilterChain filterChain(HttpSecurity http) throws Exception{
		 http.authorizeHttpRequests(auth -> 
				auth.requestMatchers(
				new AntPathRequestMatcher("/study/**"), 
				new AntPathRequestMatcher("/error"), 
				new AntPathRequestMatcher("/join"),
				new AntPathRequestMatcher("/")
				).permitAll()
				.requestMatchers(
					new AntPathRequestMatcher("/mystudy/**")
				).hasRole("LEADER") 
				.anyRequest().authenticated()
				);
		http.formLogin(form -> form.loginPage("/index").defaultSuccessUrl("/"));
		http.logout(logout -> logout.logoutSuccessUrl("/").invalidateHttpSession(true));
		http.csrf(AbstractHttpConfigurer::disable);
		http.cors(AbstractHttpConfigurer::disable);
		
		return http.getOrBuild();
		
		 
	}
	
}
